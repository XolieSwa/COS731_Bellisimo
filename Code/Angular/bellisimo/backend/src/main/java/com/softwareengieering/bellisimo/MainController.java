package com.softwareengieering.bellisimo;

import com.fasterxml.jackson.databind.util.JSONPObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

@Controller    // This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/data") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private ProductRepository productRepository;

	//User requests
	@GetMapping(path="/adduser") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Data_User n = new Data_User ();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "User saved";
	}

	@GetMapping(path="/allusers")
	public @ResponseBody Iterable<Data_User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

    // ************************ PRODUCT METHODS ****************************************


    // -------------------Retrieve All Products------------------------------------------
	@GetMapping(path="/allproducts")
	public @ResponseBody Iterable<ProductItem> getAllProducts() {
		// This returns a JSON or XML with the users
		return productRepository.findAll();
	}

    // -------------------Retrieve Single Product------------------------------------------

    @RequestMapping(value = "/product/{id}", method = RequestMethod.GET)
    public @ResponseBody ProductItem getProduct( @PathVariable("id") long id ) {
        ProductItem product = productRepository.findOne(id);
        if (product == null) {
             return null;
        }
        return product;
    }

    // -------------------Create a Product-------------------------------------------
    @RequestMapping(value = "/product/add", method = RequestMethod.POST)
    public ResponseEntity <?> createProduct ( @RequestBody ProductItem product , UriComponentsBuilder ucBuilder ) {

        /*
        if (productService.isProductExist(product)) {
            logger.error("Unable to create. A Product with name {} already exist", product.getName());
            return new ResponseEntity(new CustomErrorType("Unable to create. A Product with name " +
                    product.getName() + " already exist."),HttpStatus.CONFLICT);
        }*/
        productRepository.save (product);

        HttpHeaders headers = new HttpHeaders ();
        headers.setLocation ( ucBuilder.path ( "/data/product/{id}" ).buildAndExpand ( product.getId () ).toUri () );
        return new ResponseEntity <String> ( headers , HttpStatus.CREATED );
    }

    // ------------------- Update a Product ------------------------------------------------

    @RequestMapping(value = "/product/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> updateProduct(@PathVariable("id") long id, @RequestBody ProductItem product) {
        ProductItem currentProduct = productRepository.findOne(id);
        if (currentProduct == null) {

            return new ResponseEntity("Product to update not found",
                    HttpStatus.NOT_FOUND);
        }
        currentProduct.setCategory (product.getCategory ());
        currentProduct.setCategoryType(product.getCategoryType());
        currentProduct.setCategorySubType(product.getCategorySubType());
        currentProduct.setDescription (product.getDescription ());
        currentProduct.setSize (product.getSize ());
        currentProduct.setPrice (product.getPrice());
        currentProduct.setImagePath ( product.getImagePath ());

        productRepository.save (currentProduct);
        return new ResponseEntity<ProductItem>(currentProduct, HttpStatus.OK);
    }

    // ------------------- Delete a Product-----------------------------------------
    @RequestMapping(value = "/product/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteProduct(@PathVariable("id") long id) {
    /* logger.info("Fetching & Deleting Product with id {}", id);*/
        ProductItem product = productRepository.findOne(id);
        if (product == null) {
            return new ResponseEntity("Product to delete not found",
                    HttpStatus.NOT_FOUND);
        }
        productRepository.delete(id);
        return new ResponseEntity<ProductItem>(HttpStatus.NO_CONTENT);
    }
}